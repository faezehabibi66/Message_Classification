{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Untitled8.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ToGttWFgLvcp"
      },
      "source": [
        "# Install the packages & Importing libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MyzpcJtpTWsj"
      },
      "source": [
        "!pip  install   pandas\n",
        "!pip  install   nltk \n",
        "!pip  install   numpy\n",
        "!pip  install   scikit-learn \n",
        "!pip  install   Unidecode \n",
        "!pip  install   lime \n",
        "!pip  install   eli5 \n",
        "!pip  install   matplotlib\n",
        "!pip  install   seaborn\n",
        "!pip  install   xlrd \n",
        "!pip  install   jupyter\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pl40TUMDMNUF"
      },
      "source": [
        "# Reading the training and stop words files"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OmD49gGWbMkP"
      },
      "source": [
        "df = pd.read_csv ('training_data_tweets.csv')\n",
        "sw = pd.read_csv(\"stopwords_german.txt\", sep=\"\\n\",\n",
        "                             names=[\"stopwords\"])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "74rligDDmn9d",
        "outputId": "092062bc-a4f0-46bc-c67f-2b41bebaaaf7"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>neutral</th>\n",
              "      <th>Tainted Talents (Ateliertagebuch.) » Wir sind nicht allein</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>6757</td>\n",
              "      <td>6729</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>3</td>\n",
              "      <td>6689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>neutral</td>\n",
              "      <td>Ich habe ein -Video positiv bewertet:</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>4210</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        neutral Tainted Talents (Ateliertagebuch.) » Wir sind nicht allein \n",
              "count      6757                                               6729         \n",
              "unique        3                                               6689         \n",
              "top     neutral             Ich habe ein -Video positiv bewertet:          \n",
              "freq       4210                                                  7         "
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YcDzwPsiMdrt"
      },
      "source": [
        "# Name the columns:\n",
        "\n",
        "\n",
        "1.   labels: \"sentiment\"\n",
        "2.   given sentences as data: \"sentence\"\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZM9a6_WCbNDX"
      },
      "source": [
        "df = df.rename(columns={\"neutral\": \"sentiment\", \n",
        "                   \"Tainted Talents (Ateliertagebuch.) » Wir sind nicht allein \": \"sentence\"})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IuwpF6klmtOO"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Ym0vwVLM04d"
      },
      "source": [
        "# **Removing stop words** \n",
        "Removing stop words from training sentences to make them more-meaningful sentences"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4DmtHaHyyKox"
      },
      "source": [
        "pat = r'\\b(?:{})\\b'.format('|'.join(sw.stopwords))\n",
        "df['tweet_without_stopwords'] = df['sentence'].str.replace(pat, '')\n",
        "df['tweet_without_stopwords'] = df['tweet_without_stopwords'].str.replace(r'\\s+', ' ')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "23TERbBB08tw"
      },
      "source": [
        "*Stopwords has been removed successfully.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VcdTVozWNLus"
      },
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# **Split the data into two parts:**\n",
        "\n",
        "Using sklearn\n",
        "\n",
        "1.   training dataset (train sentence, train label)\n",
        "2.   test dataset (test sentence, test label)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GcsQ13Mo1HoW"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "# Drop the nan data from data set\n",
        "df = df.dropna()\n",
        "\n",
        "sentiment_train, sentiment_test, sentence_train, sentence_test = train_test_split(df.sentiment, df.sentence, test_size=0.2)\n",
        "print(sentence_train.shape, sentence_test.shape, sentiment_train.shape , sentence_test.shape)\n",
        "# Make sure there is no nan data\n",
        "print(sum(sentence_train.isna()*1))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qTIT40IMdIrC"
      },
      "source": [
        "# Fit & Training\n",
        "1.   **CountVectorizer:** transform a given text into a vector on the basis of the frequency (count) of each word\n",
        "2.   **RandomForestClassifier**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hBjF3OkDYIam"
      },
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "vectorizer = CountVectorizer(min_df=1)\n",
        "sentence_train_CV = vectorizer.fit_transform(sentence_train).toarray()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "naW_kz4kW7s2",
        "outputId": "65fa0f6f-ed60-4d48-8123-e09b0708d74c"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "clf = RandomForestClassifier()\n",
        "clf.fit(sentence_train_CV, sentiment_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "RandomForestClassifier()"
            ]
          },
          "execution_count": null,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kprP5j0_eXgu"
      },
      "source": [
        "*Model has been fited successfully.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KN5r-qdad1Me"
      },
      "source": [
        "# Test our models and prediction"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KZWOVsSRYYVj"
      },
      "source": [
        "predicted_sentiment = clf.predict(vectorizer.transform(sentence_test).toarray())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "1nWItKINhvEw",
        "outputId": "f775b109-674a-4304-b1f8-8d914c2ff150"
      },
      "source": [
        "from sklearn.metrics import PrecisionRecallDisplay\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "\n",
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(sentiment_test, predicted_sentiment))\n",
        "\n",
        "\n",
        "cm = confusion_matrix(sentiment_test, predicted_sentiment)\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm,\n",
        "                               display_labels=clf.classes_)\n",
        "disp.plot()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.34      0.22      0.27       200\n",
            "     neutral       0.73      0.86      0.79       849\n",
            "    positive       0.54      0.40      0.46       297\n",
            "\n",
            "    accuracy                           0.66      1346\n",
            "   macro avg       0.54      0.49      0.50      1346\n",
            "weighted avg       0.63      0.66      0.64      1346\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f32cbe0e5d0>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
